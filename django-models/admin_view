# relationship_app/views.py

from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .decorators import admin_required

@login_required
@admin_required
def admin_view(request):
    # Your view logic here
    return render(request, 'relationship_app/admin_view.html')



# relationship_app/views.py

from django.shortcuts import render
from django.contrib.auth.decorators import user_passes_test

def is_admin(user):
    return hasattr(user, 'userprofile') and user.userprofile.role == 'Admin'


# relationship_app/decorators.py

from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404
from .models import UserProfile

def admin_required(view_func):
    def _wrapped_view(request, *args, **kwargs):
        user_profile = get_object_or_404(UserProfile, user=request.user)
        if user_profile.role == 'Admin':
            return view_func(request, *args, **kwargs)
            else:
                raise PermissionDenied
        return _wrapped_view



# relationship_app/models.py
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):

    USER_ROLES= (
    ('Admin', 'Admin'),
    ('Member', 'Member'),
    ('Admin'),
    ('Librarian', 'Librarian'),
    ('Member'),
    )
    User = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=50, choices=USER_ROLES, default='Member')

    def __str__(self):
        return f'{self.user.username} - {self.role}'
        